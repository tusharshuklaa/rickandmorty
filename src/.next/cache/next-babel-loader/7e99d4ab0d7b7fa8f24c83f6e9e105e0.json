{"ast":null,"code":"var _jsxFileName = \"/Users/tusshukl/_/Dev/rickAndMorty/src/Theme/theme.context.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nconst themes = {\n  dark: {\n    backgroundColor: 'black',\n    color: 'white'\n  },\n  light: {\n    backgroundColor: 'white',\n    color: 'black'\n  }\n};\nconst initialState = {\n  dark: true,\n  toggle: () => {}\n};\nconst ThemeContext = React.createContext(initialState);\n\nfunction ThemeProvider({\n  children\n}) {\n  // Default theme is light\n  const [dark, setDark] = React.useState(false);\n  const __Dark_Theme_Key = '__dark';\n  const __Dark_Theme_Name = 'theme_dark'; // On mount, read the preferred theme from the persistence\n\n  React.useEffect(() => {\n    const isDark = localStorage.getItem(__Dark_Theme_Key) === 'true';\n    const existingClasses = document.documentElement.className;\n\n    if (isDark) {\n      document.documentElement.className = existingClasses + ' ' + __Dark_Theme_Name;\n    }\n\n    setDark(isDark);\n  }, [dark]); // To toggle between dark and light modes\n\n  const toggle = () => {\n    const isDark = !dark;\n    localStorage.setItem(__Dark_Theme_Key, JSON.stringify(isDark));\n\n    if (isDark) {\n      document.documentElement.classList.add(__Dark_Theme_Name);\n    } else {\n      document.documentElement.classList.remove(__Dark_Theme_Name);\n    }\n\n    setDark(isDark);\n  };\n\n  return __jsx(ThemeContext.Provider, {\n    value: {\n      dark,\n      toggle\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nexport { ThemeProvider, ThemeContext };","map":{"version":3,"sources":["/Users/tusshukl/_/Dev/rickAndMorty/src/Theme/theme.context.tsx"],"names":["React","themes","dark","backgroundColor","color","light","initialState","toggle","ThemeContext","createContext","ThemeProvider","children","setDark","useState","__Dark_Theme_Key","__Dark_Theme_Name","useEffect","isDark","localStorage","getItem","existingClasses","document","documentElement","className","setItem","JSON","stringify","classList","add","remove"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,IAAI,EAAE;AACJC,IAAAA,eAAe,EAAE,OADb;AAEJC,IAAAA,KAAK,EAAE;AAFH,GADO;AAKbC,EAAAA,KAAK,EAAE;AACLF,IAAAA,eAAe,EAAE,OADZ;AAELC,IAAAA,KAAK,EAAE;AAFF;AALM,CAAf;AAWA,MAAME,YAAY,GAAG;AACnBJ,EAAAA,IAAI,EAAE,IADa;AAEnBK,EAAAA,MAAM,EAAE,MAAM,CAAE;AAFG,CAArB;AAIA,MAAMC,YAAY,GAAGR,KAAK,CAACS,aAAN,CAAoBH,YAApB,CAArB;;AAEA,SAASI,aAAT,CAAuB;AAAEC,EAAAA;AAAF,CAAvB,EAAqC;AACnC;AACA,QAAM,CAACT,IAAD,EAAOU,OAAP,IAAkBZ,KAAK,CAACa,QAAN,CAAe,KAAf,CAAxB;AACA,QAAMC,gBAAgB,GAAG,QAAzB;AACA,QAAMC,iBAAiB,GAAG,YAA1B,CAJmC,CAMnC;;AACAf,EAAAA,KAAK,CAACgB,SAAN,CAAgB,MAAM;AACpB,UAAMC,MAAM,GAAGC,YAAY,CAACC,OAAb,CAAqBL,gBAArB,MAA2C,MAA1D;AACA,UAAMM,eAAe,GAAGC,QAAQ,CAACC,eAAT,CAAyBC,SAAjD;;AAEA,QAAGN,MAAH,EAAW;AACTI,MAAAA,QAAQ,CAACC,eAAT,CAAyBC,SAAzB,GAAqCH,eAAe,GAAG,GAAlB,GAAwBL,iBAA7D;AACD;;AACDH,IAAAA,OAAO,CAACK,MAAD,CAAP;AACD,GARD,EAQG,CAACf,IAAD,CARH,EAPmC,CAiBnC;;AACA,QAAMK,MAAM,GAAG,MAAM;AACnB,UAAMU,MAAM,GAAG,CAACf,IAAhB;AACAgB,IAAAA,YAAY,CAACM,OAAb,CAAqBV,gBAArB,EAAuCW,IAAI,CAACC,SAAL,CAAeT,MAAf,CAAvC;;AACA,QAAGA,MAAH,EAAW;AACTI,MAAAA,QAAQ,CAACC,eAAT,CAAyBK,SAAzB,CAAmCC,GAAnC,CAAuCb,iBAAvC;AACD,KAFD,MAEO;AACLM,MAAAA,QAAQ,CAACC,eAAT,CAAyBK,SAAzB,CAAmCE,MAAnC,CAA0Cd,iBAA1C;AACD;;AACDH,IAAAA,OAAO,CAACK,MAAD,CAAP;AACD,GATD;;AAWA,SACE,MAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEf,MAAAA,IAAF;AAAQK,MAAAA;AAAR,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,QADH,CADF;AAKD;;AAED,SAASD,aAAT,EAAwBF,YAAxB","sourcesContent":["import React from 'react'\n\nconst themes = {\n  dark: {\n    backgroundColor: 'black',\n    color: 'white'\n  },\n  light: {\n    backgroundColor: 'white',\n    color: 'black'\n  }\n}\n\nconst initialState = {\n  dark: true,\n  toggle: () => {}\n}\nconst ThemeContext = React.createContext(initialState)\n\nfunction ThemeProvider({ children }) {\n  // Default theme is light\n  const [dark, setDark] = React.useState(false)\n  const __Dark_Theme_Key = '__dark';\n  const __Dark_Theme_Name = 'theme_dark';\n\n  // On mount, read the preferred theme from the persistence\n  React.useEffect(() => {\n    const isDark = localStorage.getItem(__Dark_Theme_Key) === 'true'\n    const existingClasses = document.documentElement.className;\n\n    if(isDark) {\n      document.documentElement.className = existingClasses + ' ' + __Dark_Theme_Name\n    }\n    setDark(isDark)\n  }, [dark])\n\n  // To toggle between dark and light modes\n  const toggle = () => {\n    const isDark = !dark\n    localStorage.setItem(__Dark_Theme_Key, JSON.stringify(isDark))\n    if(isDark) {\n      document.documentElement.classList.add(__Dark_Theme_Name)\n    } else {\n      document.documentElement.classList.remove(__Dark_Theme_Name)\n    }\n    setDark(isDark)\n  }\n\n  return (\n    <ThemeContext.Provider value={{ dark, toggle }}>\n      {children}\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeProvider, ThemeContext }\n"]},"metadata":{},"sourceType":"module"}