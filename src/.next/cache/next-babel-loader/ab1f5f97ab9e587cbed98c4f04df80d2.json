{"ast":null,"code":"var _jsxFileName = \"/Users/tusshukl/_/Dev/rickAndMorty/src/Theme/theme.context.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nconst initialState = {\n  toggle: () => {}\n};\nconst ThemeContext = React.createContext(initialState);\n\nfunction ThemeProvider({\n  children\n}) {\n  const __Dark_Theme_Key = '__dark';\n  const __Dark_Theme_Name = 'theme_dark'; // On mount, read the preferred theme from the persistence\n\n  React.useEffect(() => {\n    const isDark = localStorage.getItem(__Dark_Theme_Key) === 'true';\n    const existingClasses = document.documentElement.className;\n\n    if (isDark) {\n      document.documentElement.className = existingClasses + ' ' + __Dark_Theme_Name;\n    }\n  }); // To toggle between dark and light modes\n\n  const toggle = () => {\n    const existingClasses = document.documentElement.className;\n    console.log('existing:', existingClasses);\n    const isDark = existingClasses.indexOf(__Dark_Theme_Name) > -1;\n    localStorage.setItem(__Dark_Theme_Key, JSON.stringify(isDark));\n\n    if (isDark) {\n      document.documentElement.className = existingClasses.replace(new RegExp(__Dark_Theme_Name, 'gi'), '');\n    } else {\n      document.documentElement.className = existingClasses + ' ' + __Dark_Theme_Name;\n    }\n  };\n\n  return __jsx(ThemeContext.Provider, {\n    value: {\n      toggle\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nexport { ThemeProvider, ThemeContext };","map":{"version":3,"sources":["/Users/tusshukl/_/Dev/rickAndMorty/src/Theme/theme.context.tsx"],"names":["React","initialState","toggle","ThemeContext","createContext","ThemeProvider","children","__Dark_Theme_Key","__Dark_Theme_Name","useEffect","isDark","localStorage","getItem","existingClasses","document","documentElement","className","console","log","indexOf","setItem","JSON","stringify","replace","RegExp"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,MAAM,CAAE;AADG,CAArB;AAGA,MAAMC,YAAY,GAAGH,KAAK,CAACI,aAAN,CAAoBH,YAApB,CAArB;;AAEA,SAASI,aAAT,CAAuB;AAAEC,EAAAA;AAAF,CAAvB,EAAqC;AACnC,QAAMC,gBAAgB,GAAG,QAAzB;AACA,QAAMC,iBAAiB,GAAG,YAA1B,CAFmC,CAInC;;AACAR,EAAAA,KAAK,CAACS,SAAN,CAAgB,MAAM;AACpB,UAAMC,MAAM,GAAGC,YAAY,CAACC,OAAb,CAAqBL,gBAArB,MAA2C,MAA1D;AACA,UAAMM,eAAe,GAAGC,QAAQ,CAACC,eAAT,CAAyBC,SAAjD;;AAEA,QAAGN,MAAH,EAAW;AACTI,MAAAA,QAAQ,CAACC,eAAT,CAAyBC,SAAzB,GAAqCH,eAAe,GAAG,GAAlB,GAAwBL,iBAA7D;AACD;AACF,GAPD,EALmC,CAcnC;;AACA,QAAMN,MAAM,GAAG,MAAM;AACnB,UAAMW,eAAe,GAAGC,QAAQ,CAACC,eAAT,CAAyBC,SAAjD;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBL,eAAzB;AACA,UAAMH,MAAM,GAAGG,eAAe,CAACM,OAAhB,CAAwBX,iBAAxB,IAA6C,CAAC,CAA7D;AACAG,IAAAA,YAAY,CAACS,OAAb,CAAqBb,gBAArB,EAAuCc,IAAI,CAACC,SAAL,CAAeZ,MAAf,CAAvC;;AAEA,QAAGA,MAAH,EAAW;AACTI,MAAAA,QAAQ,CAACC,eAAT,CAAyBC,SAAzB,GAAqCH,eAAe,CAACU,OAAhB,CAAwB,IAAIC,MAAJ,CAAWhB,iBAAX,EAA8B,IAA9B,CAAxB,EAA6D,EAA7D,CAArC;AACD,KAFD,MAEO;AACLM,MAAAA,QAAQ,CAACC,eAAT,CAAyBC,SAAzB,GAAqCH,eAAe,GAAG,GAAlB,GAAwBL,iBAA7D;AACD;AACF,GAXD;;AAaA,SACE,MAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEN,MAAAA;AAAF,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,QADH,CADF;AAKD;;AAED,SAASD,aAAT,EAAwBF,YAAxB","sourcesContent":["import React from 'react'\n\nconst initialState = {\n  toggle: () => {}\n}\nconst ThemeContext = React.createContext(initialState)\n\nfunction ThemeProvider({ children }) {\n  const __Dark_Theme_Key = '__dark';\n  const __Dark_Theme_Name = 'theme_dark';\n\n  // On mount, read the preferred theme from the persistence\n  React.useEffect(() => {\n    const isDark = localStorage.getItem(__Dark_Theme_Key) === 'true'\n    const existingClasses = document.documentElement.className;\n\n    if(isDark) {\n      document.documentElement.className = existingClasses + ' ' + __Dark_Theme_Name\n    }\n  })\n\n  // To toggle between dark and light modes\n  const toggle = () => {\n    const existingClasses = document.documentElement.className;\n    console.log('existing:', existingClasses);\n    const isDark = existingClasses.indexOf(__Dark_Theme_Name) > -1;\n    localStorage.setItem(__Dark_Theme_Key, JSON.stringify(isDark))\n\n    if(isDark) {\n      document.documentElement.className = existingClasses.replace(new RegExp(__Dark_Theme_Name, 'gi'), '')\n    } else {\n      document.documentElement.className = existingClasses + ' ' + __Dark_Theme_Name\n    }\n  }\n\n  return (\n    <ThemeContext.Provider value={{ toggle }}>\n      {children}\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeProvider, ThemeContext }\n"]},"metadata":{},"sourceType":"module"}